return(speaker.prob(rating, degree, m) * priors[rating])
}
nn.post(5, "hi", test.matrix)
rating
priors
priors[rating, prior.p]
priors
priors[rating, "prior.p"]
nn.post = function(rating, degree, m) {
return(speaker.prob(rating, degree, m) * priors[rating, "prior.p"])
}
nn.post(5, "hi", test.matrix)
norm.post = function(rating, degree, m) {
nn = nn.post(rating, degree, m)
norm = 0
for (i in 1:5) {
norm = norm + nn.post(i, degree, m)
}
return(nn / norm)
}
norm.post(5, "hi", test.matrix)
norm.post(5, 2, test.matrix)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low))
scale.matrix
pantheria <-
"http://esapubs.org/archive/ecol/E090/184/PanTHERIA_1-0_WR05_Aug2008.txt"
download.file(pantheria, destfile = "mammals.txt")
setwd("~/Desktop/Projects/scalar_implicature")
setwd("~/Desktop/Projects/scalar_implicature")
rm(list=ls())
source("analysis/useful_dplyr.R")
library(rjson)
mammals <- read.table("mammals.txt", sep = "\t", header = TRUE,
stringsAsFactors = FALSE)
names(mammals) <- sub("X[0-9._]+", "", names(mammals))
names(mammals) <- sub("MSW05_", "", names(mammals))
mammals <- dplyr::select(mammals, Order, Binomial, AdultBodyMass_g,
AdultHeadBodyLen_mm, HomeRange_km2, LitterSize)
names(mammals) <- gsub("([A-Z])", "_\\L\\1", names(mammals), perl = TRUE)
names(mammals) <- gsub("^_", "", names(mammals), perl = TRUE)
mammals[mammals == -999] <- NA
names(mammals)[names(mammals) == "binomial"] <- "species"
mammals <- dplyr::tbl_df(mammals)
library(dplyr)
rm(list=ls())
mammals <- read.table("mammals.txt", sep = "\t", header = TRUE,
stringsAsFactors = FALSE)
names(mammals) <- sub("X[0-9._]+", "", names(mammals))
names(mammals) <- sub("MSW05_", "", names(mammals))
mammals <- dplyr::select(mammals, Order, Binomial, AdultBodyMass_g,
AdultHeadBodyLen_mm, HomeRange_km2, LitterSize)
names(mammals) <- gsub("([A-Z])", "_\\L\\1", names(mammals), perl = TRUE)
names(mammals) <- gsub("^_", "", names(mammals), perl = TRUE)
mammals[mammals == -999] <- NA
names(mammals)[names(mammals) == "binomial"] <- "species"
mammals <- dplyr::tbl_df(mammals)
library(dplyr)
mammals
glimpse(mammals)
select(mammals, adult_head_body_len_mm)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low))
priors = read.csv("models/prior.csv")
speaker = read.csv("models/speaker.csv")
listener = read.csv("models/listener.csv")
rm(list=ls())
source("analysis/useful_dplyr.R")
library(rjson)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low))
data <- left_join(speaker, listener) %>%
left_join(priors) %>%
rowwise %>%
select(scale, degree, stars, speaker.p, listener.p, prior.p) %>%
mutate(listener.p = ifelse(is.na(listener.p), 0, listener.p)) %>%
group_by(scale)
rm(list=ls())
source("analysis/useful_dplyr.R")
library(rjson)
priors = read.csv("models/prior.csv")
speaker = read.csv("models/speaker.csv")
listener = read.csv("models/listener.csv")
data <- left_join(speaker, listener) %>%
left_join(priors) %>%
rowwise %>%
select(scale, degree, stars, speaker.p, listener.p, prior.p) %>%
mutate(listener.p = ifelse(is.na(listener.p), 0, listener.p)) %>%
group_by(scale)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low))
scale.matrix
select(scale.matrix, "liked_loved")
select(scale.matrix, scale)
filter(scale.matrix, scale == "liked_loved")
scale = "liked_loved"
scale = "liked_loved"
rating = 5
degree = "hi"
filter(scale.matrix, scale == scale)
select(filter(scale.matrix, scale == scalar), c("hi", "low")))
select(filter(scale.matrix, scale == scalar), c("hi", "low"))
scalar = "liked_loved"
filter(scale.matrix, scale == scalar)
select(filter(scale.matrix, scale == scalar), c("hi", "low"))
select(filter(scale.matrix, scale == scalar), "hi", "low")
select(filter(scale.matrix, scale == scalar), hi, low)
mutate(listener.pred = norm.post(rating, degree,
select(filter(scale.matrix, scale == scale),
hi, low)))
preds <- expand.grid(stars = 1:5,
degree = c("low","hi")) %>%
rowwise %>%
mutate(listener.pred = norm.post(rating, degree,
select(filter(scale.matrix, scale == scale),
hi, low)))
norm.post = function(rating, degree, m) {
nn = nn.post(rating, degree, m)
norm = 0
for (i in 1:5) {
norm = norm + nn.post(i, degree, m)
}
return(nn / norm)
}
nn.post = function(rating, degree, m) {
return(speaker.prob(rating, degree, m) * priors[rating, "prior.p"])
}
speaker.prob = function(rating, degree, m) {
num = speaker.lhd(m[rating, degree])
norm = 0
for ( curr in 1:2 ) {
norm = norm + speaker.lhd(m[rating, curr])
}
return(num / norm)
}
speaker.lhd = function(d) {
exp(4*(log(d) - 3)) #Rethink alpha and costs?
}
rowwise %>%
mutate(listener.pred = norm.post(rating, degree,
select(filter(scale.matrix, scale == scale),
hi, low)))
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low))
rowwise %>%
mutate(listener.pred = norm.post(rating, degree,
select(filter(scale.matrix, scale == scale),
hi, low)))
scale.matrix %>% rowwise %>%
mutate(listener.pred = norm.post(rating, degree,
select(filter(scale.matrix, scale == scale),
hi, low)))
scale.matrix
scale.matrix %>%
mutate(listener.pred = norm.post(rating, degree,
select(filter(scale.matrix, scale == scale),
hi, low)))
scale.matrix
scale.matrix %>%
mutate(listener.pred = norm.post(rating, degree,
select(filter(scale.matrix, scale == scale),
hi, low)))
scale.matrix %>%
mutate(listener.pred = norm.post(rating, degree,
select(filter(., scale == scale),
hi, low)))
scale
scale
scale.matrix %>% group_by(scale)
scale.matrix %>% group_by(scale) %>% filter("liked_loved")
scale.matrix %>% group_by(scale) %>% filter(., scale = "liked_loved")
scale.matrix %>% group_by(scale) %>% filter(., scale == "liked_loved")
get.m = function(s, m) {
return (select(filter(m, scale == s), hi, low)))
}
get.m = function(s, m) {
return (select(filter(m, scale == s), hi, low))
}
scale.matrix
get.m("liked_loved", scale.matrix)
scale.matrix %>%
mutate(listener.pred = norm.post(rating, degree, get.m(scale, .)))
.
scale.matrix %>%
mutate(listener.pred = norm.post(rating, degree, get.m(scale, scale.matrix)))
all.equal.default(x, x)
scale.matrix %>%
mutate(listener.pred = norm.post(rating, degree, get.m(scale, scale.matrix)))
scale = "liked_loved"
get.m(scale, scale.matrix)
rating
degree
norm.post(rating, degree, get.m(scale, scale.matrix))
listener.pred = norm.post(rating, degree, get.m(scale, scale.matrix))
scale.matrix %>%
mutate(listener.pred = norm.post(rating, degree, get.m(scale, scale.matrix)))
?expand.grid
scale.matrix
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
spread(degree, speaker.p)
scale.matrix
data
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
spread(degree, speaker.p)
data %>%
select(stars, degree, speaker.p, prior.p) %>%
spread(degree, speaker.p)
data %>%
select(stars, degree, speaker.p, prior.p)
get.m = function(s, m) {
m2 <- select(filter(m, scale == s), degree)) %>%
spread(degrees, spaker.p)
}
get.m = function(s, m) {
m2 <- select(filter(m, scale == s), degree) %>%
spread(degrees, speaker.p)
return(m2)
}
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
spread(degree, speaker.p)
scale.matrix
m2 <- select(filter(m, scale == s), degree) %>%
spread(degrees, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
unite(., degrees, c("hi", "low"))
test.matrix
r1 = rnorm(10, .5, .001)
test.matrix = matrix(r1, nrow = 5, ncol=2)
colnames(test.matrix) = c("hi", "low")
test.matrix
get.m = function(s, m) {
m2 <- select(filter(m, scale == s), degree) %>%
spread(degrees, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
unite(., degrees, c("hi", "low"))
return(m2)
}
scale
scale.matrix
get.m(scale, scale.matrix)
degrees
get.m = function(s, m) {
m2 <- select(filter(m, scale == s), degrees) %>%
spread(degrees, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
unite(., degrees, c("hi", "low"))
return(m2)
}
get.m(scale, scale.matrix)
scale.matrix
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p)
scale.matrix
get.m(scale, scale.matrix)
scale.matrix
get.m = function(s, m) {
m2 <- select(filter(m, scale == s), degree) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
unite(., degree, c("hi", "low"))
return(m2)
}
get.m = function(s, m) {
m2 <- filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
unite(., degree, c("hi", "low"))
return(m2)
}
scale.matrix
get.m(scale, scale.matrix)
get.m = function(s, m) {
m2 <- filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
unite(degree, c("hi", "low"))
return(m2)
}
get.m(scale, scale.matrix)
scale.matrix
s = "liked_loved"
get.m(s, scale.matrix)
get.m = function(s, m) {
m2 <- filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
unite(degree, c("hi", "low"))
return(m2)
}
get.m(s, scale.matrix)
get.m = function(s, m) {
m2 <- filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
unite(degree, c(hi, low))
return(m2)
}
get.m(s, scale.matrix)
scale.matrix
scale.matrx %>% filter(scale == s)
scale.matrix %>% filter(scale == s)
scale.matrix %>%
filter(scale == s) %>%
spread(degree, speaker.p)
scale.matrix %>%
filter(scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low))
scale.matrix %>%
filter(scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
unite(degree, c(hi, low))
scale.matrix %>%
filter(scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
scale.matrix
scale.matrix %>%
filter(scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low))
scale.matrix %>%
filter(scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>% select(hi, low)
m2 <- filter(scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
select(hi, low)
return(m2)
}
get.m = function(s, m) {
m2 <- filter(scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
select(hi, low)
return(m2)
}
scale.matrix %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, scale.matrix)))
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
scale.matrix %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
get.m(s, scale.matrix)
scale.matrix
s = scale.matrix
s = "liked_loved"
m = scale.matrix
get.m = function(s, m) {
m2 <- filter(scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
select(hi, low)
return(m2)
}
get.m(s, scale.matrix)
get.m(s, m)
filter(m, scale == s)
get.m = function(s, m) {
m2 <- filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
select(hi, low)
return(m2)
}
get.m(s, m)
get.m(scale, .)
get.m(scale, scale.matrix)
scale.matrix %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, scale.matrix)))
get.m(scale, scale.matrix)
test.matrix = get.m(scale, scale.matrix)
test.matrix
test.matrix
norm.post(5, 2, test.matrix)
scale
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low))
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p)
scale.matrix
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, scale.matrix)))
scale.matrix
ls()
remove(scale)
ls()
scale.matrix
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, scale.matrix)))
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, scale.matrix)))
s = "liked_loved"
m = scale.matrix
s = "liked_loved"
get.m(s, m)
test = get.m(s, m)
test
speaker.prob(5, "hi", test)
test
speaker.prob(5, "hi", test)
speaker.prob(5, 2, test)
norm.post(5, 2, test)
test
norm.post(5, 2, test)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, scale.matrix)))
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
m = scale.matrix
s = "liked_loved"
test = get.m(s, m)
test
test[1, low]
test[1, "low"]
test[1, "/"]
dims(test)
dim(test)
speaker.prob = function(rating, degree, m) {
num = speaker.lhd(m[rating, degree])
norm = 0
for ( i in 1:2 ) {
norm = norm + speaker.lhd(m[rating, i])
}
return(num / norm)
}
nn.post = function(rating, degree, m) {
return(speaker.prob(rating, degree, m) * priors[rating, "prior.p"])
}
#normalized posterior
norm.post = function(rating, degree, m) {
nn = nn.post(rating, degree, m)
norm = 0
for (i in 1:5) {
norm = norm + nn.post(i, degree, m)
}
return(nn / norm)
}
speaker.prob = function(rating, degree, m) {
num = speaker.lhd(m[rating, degree])
norm = 0
for ( i in 1:2 ) {
norm = norm + speaker.lhd(m[rating, i])
}
return(num / norm)
}
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p)
scale.matrix
test = get.m(s, scale.matrix)
test
scale.matrix
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p)
scale.matrix
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = nn.post(stars, degree, get.m(scale, .)))
attach(scale.matrix)
left_join(speaker, listener)
