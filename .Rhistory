hist(rnorm(10, 0, 1))
hist(rnorm(10000, 0, 1))
?hist
d0 = read.csv('http://stanford.edu/class/psych252/_downloads/earlydeaths.csv')
str(d0)
summary(d0)
head(d0)
table(d0$time, d0$cause)
table(d0$cause, d0$time)
summary(table(d0$cause, d0$time))
levels(d0$cause)
levels(d0$cause)[1] = 'Maltreat'
levels(d0$cause)[2] = 'Non-Maltr'
levels(d0$cause)
d0
d0
d0 = read.csv('http://stanford.edu/class/psych252/_downloads/earlydeaths.csv')
str(d0)
summary(d0)
head(d0)
summary(table(d0$cause, d0$time))
levels(d0$cause)
d0
d0 = read.csv('http://stanford.edu/class/psych252/_downloads/earlydeaths.csv')
str(d0)
summary(d0)
head(d0)
summary(table(d0$cause, d0$time))
d0
head(d0)
head(d0)
summary(d0)
levels(d0$cause)
levels(d0$cause)
levels(d0$cause)[1] = 'Maltreat'
levels(d0$cause)[2] = 'Non-Maltr'
levels(d0$cause)
print(table(d0$cause, d0$time))
tbl = table(d0$cause, d0$time)
print(tbl)
sum(tbl[1,])
tx = addmargins(table(d0$cause, d0$time, dnn=c('Cause','Time')))
print(tx)
tx = addmargins(table(d0$cause, d0$time, dnn=c('Cause','Time')))
tx
summary(table(d0$cause, d0$time))
summary(table(d0$cause, d0$time))
rs1 = summary(table(d0$cause, d0$time))
print(rs1)
?chisq.test
chisq.test(table(d0$cause, d0$time))
chisq.test(d0$cause, d0$time)
rs1
table(d0$cause, d0$time)
chisq = rs1$statistic
chisq = rs1$statistic
d
chisq
df = rs1$parameter
df
d0
t = table(d0$cause, d0$time)
t
t[1, 3] = 80
rs1 = summary(table(d0$cause, d0$time))
summary(t)
head(d0)
lm(cause~teime, data=d0)
lm(cause~time, data=d0)
17/4
2 + 3 + 4 + 5
(2 + 3 + 4 + 5) / 4
log(.5)
8/27
log(0.5)
1 - 8/27
install.packages("popbio")
?corr
?cor
d0 = read.csv("http://web.stanford.edu/class/psych252/data/hw2data.csv")
library(ggplot2)
ggplot(data=d0, aes(x=Pasthapp, y=Futurehapp)) +
geom_point(size=2, alpha=0.8) +
geom_smooth(method=lm, color='red')
res1a = lm(Futurehapp ~ Pasthapp, data = d0)
summary(res1a)
names(res1a)
names(res1a)$coefficients
res1a$coefficients
?zq()
?qz()
?qnorm()
qnorm(0.05, lower.tail=T)
2.7 / (3)
-1.1645 * 0.9 + 4.9
z.alphaLevel = -.1645
c = z.alphalevel * (sd0 / sqrt(n)) + h0.x
z.alphaLevel = -1.645
c = z.alphaLevel * (sd0 / sqrt(n)) + h0.x
h0.x = 4.9
sd0 = 2.7
h1.x = 2.8
sd1 = 2.7
n = 9
alpha = 0.05
xbar = 3.4
z.score = (xbar - h0.x) / (sd0 / sqrt(n))
z.score
# what is the z-value for lower one-tailed with alpha = 0.05?
z.cutoff = qnorm(0.05, lower.tail=T)
z.cutoff
# is our z-value beyond the cutoff?
z.score - z.cutoff < 0
# we can confirm by running pnorm()
p.value = pnorm(z.score)
p.value
z.alphaLevel = qnorm(0.05, lower.tail=T)
z.alphaLevel
c = z.alphaLevel * (sd0 / sqrt(n)) + h0.x
c
xbar < c
c
3.48 - 2.8
2.7 / 3
3.48 - 2.8
denom = 2.7 / 3
num = 3.48 - 2.8
num / denom
qnorm(0.7555, lower.tail=T)
qnorm(-4,76, lower.tail=T)
qnorm(-4.76, lower.tail=T)
qnorm(0.84, lower.tail=T)
qnorm(0.7555, lower.tail=T)
qnorm(0.84, lower.tail=T)
qnorm(-4.76, lower.tail=T)
qnorm(4, lower.tail=T)
qnorm(1, lower.tail=T)
qnorm(-1, lower.tail=T)
pnorm(0.84, lower.tail=T)
pnorm(-4.76, lower.tail=T)
pnorm(0.84, lower.tail=T) + pnorm(-4.76, lower.tail=T)
pnorm(0.7555, lower.tail=T)
?power.test
pwr.check = (c - h1.x) / (sd1 / sqrt(9)
pwr.check = (c - h1.x) / (sd1 / sqrt(9))
pnorm(pwr.check, lower.tail=T)
-5 * .8
-5 * .7
-5 * .3
.8 * 20
.7 * 20
0.8 * 11
o.2 * 25
0.2 * 25
0.3 * 25
0.7 * 25
0.5 * 16
0.7 * 16
0.7 * 11
0.8 * 6
0.7 * -6
0.8 * 20
.2 * 6
.3 * 6
0.7 * 20
.3 * -5
.7 * -5
.2 * (-5  + 26.5)
.3 * (-5  + 26.5)
df = n - 1
n = 25
d.bar = 1.5
sd.d = 3.4
p.n = 18  # number of patients with positive change score
3.4 / sqrt(n)
1.5 / 0.68
d.bar / (sd.d / sqrt(n))
t24 = d.bar / (sd.d / sqrt(n))
qt(t24, df)
?qt
pt(t24, df)
1 - pt(t24, df)
1 - pt(t24, df) * 2
(1 - pt(t24, df)) * 2
2 * (1 - pt(t24, df))
qt(0.95, 24)
qt(0.95, 24, lower.tail=F)
qt(0.05, 24, lower.tail=F)
qt(0.05, 24, lower.tail=T)
t24
qt(0.025, 24, lower.tail=T)
cuttoffs = c(qt(0.025, 24, lower.tail=T), -qt(0.025, 24, lower.tail=T))
cuttoffs
t24 < cuttofs[1] | t24 > cuttofs[2]
cuttoffs
t24 < cuttoffs[1] | t24 > cuttoffs[2]
p.val = pt(t24, 24)
p.val = pt(t24, 24)
p.val
1 - p.val
p.val = 1 - pt(t24, 24)
p.val
p.val < 0.025
std.err = (sd.d / sqrt(n))
t24 = d.bar / std.err
t24
d.bar + qt(0.95, df) * (std.err)
lower = d.bar - qt(0.95, df) * (std.err)
bounds = c(lower, upper)
upper = d.bar + qt(0.95, df) * (std.err)
lower = d.bar - qt(0.95, df) * (std.err)
bounds = c(lower, upper)
bounds
(std.err)
d.bar
qt(0.95, df)
df
n
df = n - 1
upper = d.bar + qt(0.95, df) * (std.err)
upper
upper = d.bar + qt(0.95, df) * (std.err)
lower = d.bar - qt(0.95, df) * (std.err)
bounds = c(lower, upper)
bounds
c = qt(0.95, df)
c = qt(0.95, df)
upper = d.bar + c * (std.err)
lower = d.bar - c * (std.err)
bounds = c(lower, upper)
bounds
c
p = 18 / 25
p
mu = p * n
mu
p = 18 / 25
p
pbinom(17, 25, 0.5)
1 - pbinom(17, 25, 0.5)
numSuccess.cc = 18 -1
mu = 0.5
numSuccess.cc = 18 -1
1 - pbinom(numSuccess.cc, n, mu)
(1 - pbinom(numSuccess.cc, n, mu)) * 2
2 * (1 - prob.17)
prob.17 = pbinom(numSuccess.cc, n, mu))
(1 - prob.17)
mu = 0.5
numSuccess.cc = 18 -1
prob.17 = pbinom(numSuccess.cc, n, mu))
mu = 0.5
numSuccess.cc = 18 - 1
# probability of 17 or fewer
prob.17 = pbinom(numSuccess.cc, n, mu)
(1 - prob.17)
p.val = 2 * (1 - prob.17)
p.val
p.val < 0.5
p.val = 2 * (1 - prob.17)
p.val
p.val < 0.5
p = 18 / 25
mu = 0.5
?pbinom
qbinom(p, n, 0.5)
qbinom(p, n)
q = 1 - p
p = 18 / 25
q = 1 - p
q
sqrt(n)
se.p = sqrt(p * q) / sqrt(n)
se.p
p * q
(p + 1.96 * se.p)
bounds = (p + 2 * se.p)
bounds
sqrt(n)
p + 1 / sqrt(n)
bounds = ((p + 1.96 * se.p),(p + 1.96 * se.p))
bounds = c((p + 1.96 * se.p),(p + 1.96 * se.p))
bounds
bounds = c((p - 1.96 * se.p),(p + 1.96 * se.p))
c((p + 1 / sqrt(n)), (p - 1 / sqrt(n)))
bounds.lazy = c((p + 1 / sqrt(n)), (p - 1 / sqrt(n)))
bounds.lazy
n1 = 10
x1 = 11.1
ss1 = 130
# Sample 2
n2 = 7
x2 = 13.9
ss2 = 95
s2.pooled = (ss1 + ss2) / (n1 + n2 - 2)
s2.pooled
df.pooled = n1 + n2 - 2
df.pooled
qchisq(0.05, n1 + n2 - 2)
s2.pooled + qchisq(0.05, n1 + n2 - 2)
s2.pooled
qchisq(0.05, n1 + n2 - 2)
s2.pooled + qchisq(0.025, n1 + n2 - 2)
s2.pooled + qchisq(0.05, n1 + n2 - 2)
qchisq(0.05, n1 + n2 - 2)
ss1 / qchisq(0.05, n1 + n2 - 2)
ss2 / qchisq(0.05, n1 + n2 - 2)
ss2 / qchisq(0.05, n2)
ss1 / qchisq(0.05, n1)
ss1 / qchisq(0.05, n1 + n2 - 2)
ss1 + ss2 / qchisq(0.05, n1 + n2 - 2)
s2.pooled
qchisq(0.025, n1 + n2 - 2)
ss2 / qchisq(0.025, n1 + n2 - 2)
s2.pooled + ss2 / qchisq(0.025, n1 + n2 - 2)
ss1 / qchisq(0.025, n1)
ss1 / qchisq(0.05, n1)
(n1 + n2 - 2) * s2.pooled
((n1 + n2 - 2) * s2.pooled) / qchisq(0.05, n1 + n2 -2)
n.pooled = n1 + n2 - 2
bounds = c(((n.pooled) * s2.pooled) / qchisq(0.05, n.pooled), (((n.pooled) * s2.pooled) / qchisq(0.95, n.pooled)))
bounds
bounds = c((((n.pooled) * s2.pooled) / qchisq(0.95, n.pooled)),
((n.pooled) * s2.pooled) / qchisq(0.05, n.pooled))
bounds
n1
n2
s2.pooled
x1
x2
t.2samp = (x1 - x2) / sqrt(s2.pooled * ((1/n1) + (1/n2)))
t.2samp
pt(t.2samp, n1 + n2 - 2)
qt(0.025, n1 + n2 - 2)
cutoff = qt(0.025, n1 + n2 - 2)
t.2samp < cutoff | t.2samp > cutoff
t.2samp < cutoff
cutoff
t.2samp < cutoff | t.2samp > -cutoff
qt(t.2samp, n1 + n2 - 2)
pt(t.2samp, n1 + n2 - 2)
ss1/n-1
sart(ss1/n-1)
sqrt(ss1/n-1)
sqrt(ss2/n-2)
s2.pooled
sqrt(s2.pooled)
sd.d
sd.d^2
n
bounds = c((((n-1) * sd.d^2) / qchisq(0.95, n-1)),
((n-1) * sd.d^2) / qchisq(0.05, n-1))
bounds
boundsA = c((((n-1) * sd.d^2) / qchisq(0.95, n-1)),
((n-1) * sd.d^2) / qchisq(0.05, n-1))
boundsB = c((((n.pooled) * s2.pooled) / qchisq(0.95, n.pooled)),
((n.pooled) * s2.pooled) / qchisq(0.05, n.pooled))
boundsB
boundsA
boundsB
64 * 0.375
349.25 - ((24 * 870)/64)
23 / (sqrt(2.52 * 780))
0.5187765^2
0.519 * (sqrt(62 / (1 - 0.269)))
pt(4.78, df=62)
1 -pt(4.78, df=62)
1 - pt(4.78, df=62)
(1 - pt(4.78, df=62)) * 2
23 / 2.52
13.6 + 0.375*9.126
13.6 - 0.375*9.126
qt(0.05, df=63)
sqrt(780 / 63)
sqrt(64)
1.67 * (3.52 / 8)
qt(0.05, df=63)
13.6 - 0.73
13.6 + 0.73
qnorm(0.05)
10.18 + 9.126 * 0.18
qnorm(0.05)
(2 * 1.645) / sqrt(20)
(0.736 - 0.7) / (2 / sqrt(20))
1 - pnorm(0.08)
(2 * 1.645) / sqrt(20)
1 - pnorm(0.08)
?
?power.t.test()
power.t.test
?power.t.test()
power.t.test(n = 1000, delta=0.7, sd=2, sig.level=0.05,
alternative="one.sided", type="one.sample")
power.t.test(n = 20, delta=0.7, sd=2, sig.level=0.05,
alternative="one.sided", type="one.sample")
power.t.test(delta=0.7, sd=2, sig.level=0.05, power=0.8,
alternative="one.sided", type="one.sample")
power.t.test(n = 52, delta=0.7, sd=2, sig.level=0.05,
alternative="one.sided", type="one.sample")
1.5 / (3.4 / 5)
qt(0.05, df = 23)
pt(2.2, df = 23)
qt(0.025, df = 23)
3.4 / (sqrt(20))
qt(0.9, df=23)
qt(0.05, df=23)
1.5 + 1.7 * 0.76
1.5 - 1.7 * 0.76
std.err = 3.4 / (sqrt(25))
std.err = 3.4 / (sqrt(25)); std.err
1.5 - 1.7 * 0.68
1.5 + 1.7 * 0.68
qt(0.05, df=24)
1.5 + 1.71 * 0.68
1.5 - 1.71 * 0.68
?pbinom()
pbinom(18, 25, prob=0.5)
1 - pbinom(18, 25, prob=0.5)
0.5^2
25 * 0.5^2
var = 25 * 0.5^2
s = sqrt(var); s
t = 18 - 12.5 / (s / 5)
t = 18 - 12.5 / (s / 5); t
pt(-7, df=24)
(18 - 13) / 2.5
18 / 25
0.72 + 1.96 * (sqrt(0.72 * 0.28)/5)
0.72 + 1.96 * (sqrt(0.72 * 0.28)/5)
qchisq
?qchisq
qchisq(0.05, 24)
qchisq(0.95, 24)
24 * 3.4^2
277.44 / 13.85
277.44 / 36.42
(130 + 95) / (10 + 7 - 2)
qchisq(0.95, 15)
qchisq(0.05, 15)
15^3
15^3 / 25
15^3 / 7.26
15^2 / 7.26
15^2 / 25
(11.1 - 13.9)/(sqrt(15 * (1/10 + 1/7)))
pt(1.47, df=15)
1 - pt(1.47, df=15)
56.9 - 38.2
13.2 / 5
18.7 / 2.64
pt(7.08. df=24)
pt(7.08, df=24)
1 - pt(7.08, df=24)
*2
2 * (1 - pt(7.08, df=24))
5521.3 / 6995.4
56.9 - 0.789 * 38.2
5521.3 / (sqrt(6995.4 * 8225.8))
(5521.3 / (sqrt(6995.4 * 8225.8)))^2
0.73^2
0.73 * (sqrt(23 / (1 - 0.53)))
pt(5.1, df=23)
sqrt(8225.8 / 23)
sqrt((8225.8 / 23) * 0.53)
sqrt((8225.8 / 23) * 0.47)
26.76 + 0.789*65
78.05 - 65
qnorm(0.05)
qnorm(0.16)
78.05 + 0.994 * 12.97
78.05 - 0.994 * 12.97
26.67 + 0.789*20
(26.67 + 0.789*20) - 20
qnorm(0.025)
3 * 1.96
5.88 - 8
(5.88 - 8) / 3
1 - pnorm(-0.71)
?power.t.test
power.t.test(n=36, delta=8, sd=18, sig.level=0.025,type="one.sample")
power.t.test(n=36, delta=8, sd=18, sig.level=0.025, type="one.sample", alternative="one.sided")
power.t.test(delta=8, sd=18, sig.level=0.025, type="one.sample", alternative="one.sided", power=0.7)
0.6 * 0.4
0.4^2 + 0.6*0.4*2 + 0.6^2
?pbinom()
pbinom(8, 12, 0.4)
1 - pbinom(8, 12, 0.4)
55 * 9
495 * (0.4^8) * (0.6^4)
dbinom(8, 12, 0.4)
guilty = c(30, 20)
notGuilty = c(30, 60)
df = rbind(guilty, notGuilty)
df = as.data.frame(df)
colnames(df) = c("Serious", "Nserious")
df = as.matrix(df)
df
)
chisq.test(df)
?chisq.test
rm(list=ls())
library(knitr)
install.packages("knitr")
install.packages("dplyr")
install.packages("tidyr")
setwd("~/Desktop/Projects/scalar_implicature/")
speaker = read.csv("models/e8.csv")
listener = read.csv("models/listener.csv")
install.packats("rjson")
install.packages("rjson")
getwd()
install.packages("ggplot2")
