x.train = model.matrix(Apps~., data=d.train)[,-1]
x.test = model.matrix(Apps~., data=d.test)[,-1]
grid = 10 ^ seq(10, -2, length=100)
ridge.mod = glmnet(x.train, d.train[, "Apps"], alpha=0,
lambda=grid, thresh=1e-12)
ridge.mod
r.lambda.choice = min(ridge.mod$lambda)
ridge.pred = predict(ridge.mod, newx=x.test, s=r.lambda.choice)
r.test.error = mean((d.test[,"Apps"] - ridge.pred)^2)
r.test.error
l.lambda.choice = min(lasso.mod$lambda)
l.lambda.choice = min(lasso.mod$lambda)
lasso.pred = predict(lasso.mod, newx=x.test, s=l.lambda.choice)
l.test.erro = mean((d.test[,"Apps"] - lasso.pred)^2)
l.test.error = mean((d.test[,"Apps"] - lasso.pred)^2)
l.test.error
r.test.error
vals = c(test.error, r.test.error, l.test.error)
vals
plot(vals)
lasso.pred
lasso.mod
l.coefs = glmnet(model.matrix(Apps~., newx=x.test, s=l.lambda.choice))
l.coefs = glmnet(model.matrix(Apps~., newx=x.test, s=l.lambda.choice), College[, "Apps"], alpha=1)
l.coefs = glmnet(model.matrix(Apps~., data=College), College[, "Apps"], alpha=1)
l.coefs
predict(lasso.mod, s=l.lambda.choice, type="coefficients")
library(ISLR)
library(glmnet)
library(ISLR)
library(glmnet)
#Note referenced Lab2 Section 6.6
#A: Training set and test set ---------->
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
d.train = College[train,]
d.test = College[test,]
names(College)
d = model.matrix
#B: linear model using least squares ---------->
lm = lm(Apps~., data=College)
summary(lm)
lm.prediction = predict(lm, d.test)
test.error = mean((d.test[,"Apps"] - lm.prediction)^2)
#Least Squares RSS:
test.error
#C: Ridge Regression with CV for lambda ---------->
x.train = model.matrix(Apps~., data=d.train)[,-1]
x.test = model.matrix(Apps~., data=d.test)[,-1]
grid = 10 ^ seq(10, -2, length=100)
ridge.mod = glmnet(x.train, d.train[, "Apps"], alpha=0,
lambda=grid, thresh=1e-12)
ridge.mod
r.lambda.choice = min(ridge.mod$lambda)
ridge.pred = predict(ridge.mod, newx=x.test, s=r.lambda.choice)
r.test.error = mean((d.test[,"Apps"] - ridge.pred)^2)
r.test.error
#D: Lasso with CV for lambda ---------->
lasso.mod = glmnet(x.train, d.train[, "Apps"], alpha=1,
lambda=grid, thresh=1e-12)
lasso.mod
l.lambda.choice = min(lasso.mod$lambda)
lasso.pred = predict(lasso.mod, newx=x.test, s=l.lambda.choice)
lasso.pred
l.test.error = mean((d.test[,"Apps"] - lasso.pred)^2)
l.test.error
l.coefs = glmnet(model.matrix(Apps~., data=College), College[, "Apps"], alpha=1)
predict(lasso.mod, s=l.lambda.choice, type="coefficients")
#We don't see an 0 coefs here, althought some that get fairly close
x = model.matrix(Apps∼.,College)[,-1]
x = model.matrix(Apps∼.,data=College)[,-1]
names(Collge)
library(ISLR)
names(College)
x = model.matrix(Apps∼.,data=College)[,-1]
data=College
x = model.matrix(Apps∼., data=College)[,-1]
library(glmnet)
x = model.matrix(Apps∼., data=College)[,-1]
x = model.matrix(Apps ∼., data=College)[,-1]
x = model.matrix(Apps∼.,College)[,-1]
names(College)
x = model.matrix("Apps"∼.,data=College)[,-1]
x = model.matrix(Apps∼.,data=College)
x = model.matrix(Apps~., College)[,-1]
x
train = sample(1:nrow(x), nrow(x)/2)
predict(lasso.mod, s=l.lambda.choice, type="coefficients")
84 * 3
2232 / 82
2232 / 4
-600
600-558
2232 / 12
2232/16
2232/18
2232/2
1116+18
134533786 - 134533632
154 / 4
150/4
4 * 38
109 + 112 + 66 + 106 + 116 + 118 + 90 + 115 + 105
108 + 106 + 54 + 48 + 112 + 66 + 106 + 116 + 118 + 90 + 56
980 - 108
grid = 10^seq(10, -2, length=100)
library(ISLR)
library(glmnet)
train = sample(1:nrow(x), nrow(x)/2)
x = model.matrix(Apps~., College)[,-1]
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
y = College$Apps
y
y.test = y[test]
y.test
x[train, ]
y[train]
ridge.mod = glmnet(x[train, ], y[train], alpha=0,
lambda=grid, thresh=1e-12)
ridge.mod
ridge.pred = predict(ridge.mod, s=4, newx=x[test,])
ridge.pred
mean((ridge.pred - y.test) ^2)
test.error
lm = lm(y~x, subset=train)
lm
summary(lm)
mean((lm - y.test)^2)
mean((lm.pred - y.test)^2)
lm.pred = predict(lm, d.test)
mean((lm.pred - y.test)^2)
lm.pred = predict(lm, d.test)
lm.pred = predict(lm, y.test)
y.test
lm
predict(lm, y.test)
ridge.mod = cv.glmnet(x[train, ], y[train], alpha=0)
ridge.mod
bestlam = ridge.mod$lambda.min
bestlam
ridge.pred = predict(ridge.mod, s=bestlam, newx=x[test,])
mean((ridge.pred - y.test) ^2)
setseed(1)
set.seed(1)
names(College)
grid = 10^seq(10, -2, length=100)
x = model.matrix(Apps~., College)[,-1]
y = College$Apps
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
y.test = y[test]
ridge.mod = cv.glmnet(x[train, ], y[train], alpha=0)
ridge.mod = cv.glmnet(x[train, ], y[train], alpha=0)
bestlam = ridge.mod$lambda.min
bestlam
ridge.pred = predict(ridge.mod, s=bestlam, newx=x[test,])
mean((ridge.pred - y.test) ^2)
plot(ridge.mod)
plot(ridge.mod)
bestlam
plot(ridge.mod, "CV mod")
plot(ridge.mod, main="CV mod")
ridge.mod = cv.glmnet(x[train, ], y[train], alpha=0)
bestlam = ridge.mod$lambda.min
plot(ridge.mod, main="CV mod")
bestlam
set.seed(1)
set.seed(1)
ridge.mod = cv.glmnet(x[train, ], y[train], alpha=0)
plot(ridge.mod, main="CV mod")
bestlam = ridge.mod$lambda.min
bestlam
ridge.pred = predict(ridge.mod, s=bestlam, newx=x[test,])
mean((ridge.pred - y.test) ^2)
ridge.mod2 = glmnet(x, y, alpha=0)
ridge.predict(ridge.mod, s=bestlam, newx=x)
gdlmnet(ridge.mod, s=bestlam, newx=x)[1:10]
glmnet(ridge.mod, s=bestlam, newx=x)[1:10]
predict(ridge.mod2, type="coefficients", s=bestlam)[1:10]
predict(ridge.mod2, type="coefficients", s=bestlam)[1:10,]
predict(ridge.mod2, type="coefficients", s=bestlam)[1:20,]
predict(ridge.mod2, type="coefficients", s=bestlam)[1:12,]
names(college)
names(College)
predict(ridge.mod2, type="coefficients", s=bestlam)[1:18,]
lasso.mod = glmnet(x[train,], y[train], alpha=1,
lambda=grid)
lasso.mod
plot(lasso.mod)
set.seed(1)
cv.lasso = cv.glmnet(x[train,], y[train], alhpa=1)
cv.lasso = cv.glmnet(x[train,], y[train], alpha=1)
cv.lasso
plot(cv.lasso)
plot(cv.lasso, main= "CV Lasso")
bestlam=cv.lasso$lambda.min
lasso.pred=predict(lasso.mod, s=bestlam, newx=x[test,])
lasso.pred
mean((lasso.pred, y.test)^2)
lasso.pred=predict(lasso.mod, s=bestlam, newx=x[test,])
mean((lasso.pred - y.test)^2)
out=glmnet(x, y, alpha=1, lambda=grid)
lasso.coef=predict(out, type="coefficients", s=bestlam)[1:20,]
out=glmnet(x, y, alpha=1, lambda=grid)
lasso.coef=predict(out, type="coefficients", s=bestlam)[1:20,]
lasso.coef=predict(out, type="coefficients", s=bestlam)
lasso.coef=predict(out, type="coefficients", s=bestlam)[1:19,]
lasso.coef=predict(out, type="coefficients", s=bestlam)[1:18,]
lasso.coef
mean((lm.pred - y.test)^2)
lm.pred = predict(lm, y.test)
lm.pred = predict(lm, y.test)
lm = lm(y~x, subset=train)
lm
predict(lm, y.test)
lm.pred = predict(lm, y.test, newx=x[test,])
lm = lm(y~x, subset=train)
ridge.mod=glmnet(x[train,], y[train], alpha=0, lambda=grid, thresh=1e^-12)
glmnet(x[train,], y[train], alpha=0, lambda=grid, thresh=1e^-12)
grid = 10^seq(10, -2, length=100)
x = model.matrix(Apps~., College)[,-1]
y = College$Apps
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
y.test = y[test]
ridge.mod=glmnet(x[train,], y[train], alpha=0, lambda=grid, thresh=1e^-12)
ridge.mod=glmnet(x[train,], y[train], alpha=0, lambda=grid, thresh=1e-12)
lm.pred = predict(ridge.mod, s=0, newx=x[test,], exact=T)
mean((lm.pred - y.test)^2)
priors = read.csv("models/prior.csv")
speaker = read.csv("models/speaker.csv")
listener = read.csv("models/listener.csv")
setwd("~/Desktop/Projects/scalar_implicature/models")
setwd("~/Desktop/Projects/scalar_implicature/")
priors = read.csv("models/prior.csv")
speaker = read.csv("models/speaker.csv")
listener = read.csv("models/listener.csv")
u.cost = function(u) {
return(nchar(u))
}
speaker.lhd = function(d) {
exp(4*(log(d) - 3)) #Rethink alpha and costs?
}
speaker.prob = function(rating, degree, m) {
num = speaker.lhd(m[rating, degree])
norm = 0
for ( i in 1:2 ) {
norm = norm + speaker.lhd(m[rating, i])
}
return(num / norm)
}
nn.post = function(rating, degree, m) {
return(speaker.prob(rating, degree, m) * priors[rating, "prior.p"])
}
#normalized posterior
norm.post = function(rating, degree, m) {
nn = nn.post(rating, degree, m)
norm = 0
for (i in 1:5) {
norm = norm + nn.post(i, degree, m)
}
return(nn / norm)
}
get.m = function(s, m) {
m2 <- filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
select(hi, low)
return(m2)
}
data <- left_join(speaker, listener) %>%
left_join(priors) %>%
rowwise %>%
select(scale, degree, stars, speaker.p, listener.p, prior.p) %>%
mutate(listener.p = ifelse(is.na(listener.p), 0, listener.p)) %>%
group_by(scale)
source("analysis/useful_dplyr.R")
library(rjson)
data <- left_join(speaker, listener) %>%
left_join(priors) %>%
rowwise %>%
select(scale, degree, stars, speaker.p, listener.p, prior.p) %>%
mutate(listener.p = ifelse(is.na(listener.p), 0, listener.p)) %>%
group_by(scale)
scale.matrix
data
data <- left_join(speaker, listener) %>%
left_join(priors) %>%
rowwise %>%
select(scale, degree, stars, speaker.p, listener.p, prior.p) %>%
mutate(listener.p = ifelse(is.na(listener.p), 0, listener.p)) %>%
group_by(scale)
scale.matrix <- data
scale.matrix
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p)
scale.matrix
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
debug(get.m)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
hi
m
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
print(s)
scale.matrix
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
undebug
undebug(get.m)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
d.m <- data %>%
select(stars, degree, speaker.p, prior.p)
d.m
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
d.m
d.m
m2 = d.m
m2 <- filter(m, scale == s)
m = d.m
s = "liked_loved"
filter(m, scale == s)
filter(m, scale == s) %>%
spread(degree, speaker.p)
filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low))
filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
select(hi, low)
m2 <- filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
select(hi, low)
m2
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p)
scale.matrix
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
degbug(get.m)
debug(get.m)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
print(s)
print(m)
debug(get.m)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
print(symbol)
undebug(get.m)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
scale.matrix
m = d.m
s = "liked_loved"
filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low))
filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
select(hi, low)
d.m
debug(norm.post)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
print(m)
si
print(rating)
print(degree)
print(m)
print(m)
p d
print(d)
exit
quit
up
d.m <- data %>%
select(stars, degree, speaker.p, prior.p)
d.m
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
#rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
#rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
print(m)
print(m)
si
print(d)
si
print(num)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
#rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
print(m)
print(m)
print(rating)
print(degree)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
p m
print(m)
pritn(rating)
print(rating)
print(degree)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
print(rating)
print(m)
get.m = function(s, m) {
m2 <- filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
select(hi, low)
return(m2)
}
d.m <- data %>%
select(stars, degree, speaker.p, prior.p)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
print(d)
d.m <- data %>%
select(stars, degree, speaker.p, prior.p)
d.m
norm.post(stars, degree, get.m(scale, d.m))
print(m)
print(m)
d.m
scale
get.m(s, d.m)
get.m(s, d.m)
get.m = function(s, m) {
m2 <- filter(m, scale == s) %>%
spread(degree, speaker.p) %>%
mutate(hi = hi / sum(hi),
low = low / sum(low)) %>%
select(hi, low)
return(m2)
}
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, .)))
print(m)
preds <- expand.grid(stars = 1:5,
degree = c("low","hi")) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, scale.matrix)))
print(m)
scale.matrix
expand.grid(stars = 1:5,
degree = c("low","hi"))
norm.post(stars, degree, get.m(scale, scale.matrix))
undebug(norm.post)
norm.post(stars, degree, get.m(scale, scale.matrix))
stars
d.m
get.m(s, d.m)
scale.matrix <- data %>%
select(stars, degree, speaker.p, prior.p) %>%
rowwise() %>%
mutate(listener.pred = norm.post(stars, degree, get.m(scale, d.m)))
