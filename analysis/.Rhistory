entry = c(n=n, n.comparisons=combo(n), type1.ER=error.rate)
summary.matrix = c(summary.matrix, entry)
}
combo <- function(n, r=2) {
summary.matrix = c()
#Loop through number of data sets
for(n in 2:10) {
###------Our sim functoin-------###
sim = function(k) {
#Our current n data sets with 15 sample, mean=3, sigma=1
data.sets = sapply(1:n, FUN=function(i){rnorm(15,3,1)})
all.p.values = c()
#Assess all possible combinations of of pairwise comparisons
for(i in 1:(n-1)) {
for(j in (i+1):n) {
#current pairwise comparison
p.value = t.test(data.sets[,i], data.sets[,j])$p.value
#append to vector of p.values
all.p.values = c(all.p.values, p.value)
}
}
#return boolean if any are lower than .05
return(any(all.p.values < .05))
}
###------Our sim functoin-------###
#run simulation 1000 times at current n
sims = sapply(1:1000, FUN=sim)
error.rate = mean(sims)
entry = c(n=n, n.comparisons=combo(n), type1.ER=error.rate)
summary.matrix = c(summary.matrix, entry)
}
summary.matrix = c()
#Loop through number of data sets
for(n in 2:10) {
###------Our sim functoin-------###
sim = function(k) {
#Our current n data sets with 15 sample, mean=3, sigma=1
data.sets = sapply(1:n, FUN=function(i){rnorm(15,3,1)})
all.p.values = c()
#Assess all possible combinations of of pairwise comparisons
for(i in 1:(n-1)) {
for(j in (i+1):n) {
#current pairwise comparison
p.value = t.test(data.sets[,i], data.sets[,j])$p.value
#append to vector of p.values
all.p.values = c(all.p.values, p.value)
}
}
#return boolean if any are lower than .05
return(any(all.p.values < .05))
}
###------Our sim functoin-------###
#run simulation 1000 times at current n
sims = sapply(1:1000, FUN=sim)
error.rate = mean(sims)
entry = c(n=n, n.comparisons=combo(n), type1.ER=error.rate)
summary.matrix = c(summary.matrix, entry)
}
combo <- function(n, r=2) {
return(factorial(n)/(factorial(n-r)*factorial(r)))
}
for(n in 2:10) {
###------Our sim functoin-------###
sim = function(k) {
#Our current n data sets with 15 sample, mean=3, sigma=1
data.sets = sapply(1:n, FUN=function(i){rnorm(15,3,1)})
all.p.values = c()
#Assess all possible combinations of of pairwise comparisons
for(i in 1:(n-1)) {
for(j in (i+1):n) {
#current pairwise comparison
p.value = t.test(data.sets[,i], data.sets[,j])$p.value
#append to vector of p.values
all.p.values = c(all.p.values, p.value)
}
}
#return boolean if any are lower than .05
return(any(all.p.values < .05))
}
###------Our sim functoin-------###
#run simulation 1000 times at current n
sims = sapply(1:1000, FUN=sim)
error.rate = mean(sims)
entry = c(n=n, n.comparisons=combo(n), type1.ER=error.rate)
summary.matrix = c(summary.matrix, entry)
}
summar.matrix
summary.matrix
combo <- function(n, r=2) {
return(factorial(n)/(factorial(n-r)*factorial(r)))
}
summary.matrix = c()
#Loop through number of data sets
for(n in 2:10) {
###------Our sim functoin-------###
sim = function(k) {
#Our current n data sets with 15 sample, mean=3, sigma=1
data.sets = sapply(1:n, FUN=function(i){rnorm(15,3,1)})
all.p.values = c()
#Assess all possible combinations of of pairwise comparisons
for(i in 1:(n-1)) {
for(j in (i+1):n) {
#current pairwise comparison
p.value = t.test(data.sets[,i], data.sets[,j])$p.value
#append to vector of p.values
all.p.values = c(all.p.values, p.value)
}
}
#return boolean if any are lower than .05
return(any(all.p.values < .05))
}
###------Our sim functoin-------###
#run simulation 1000 times at current n
sims = sapply(1:1000, FUN=sim)
error.rate = mean(sims)
entry = c(n, combo(n), error.rate)
summary.matrix = c(summary.matrix, entry)
}
summary.matrix
summary.matrix = matrix(nrow=9, ncol=3)
for(n in 2:10) {
###------Our sim functoin-------###
sim = function(k) {
#Our current n data sets with 15 sample, mean=3, sigma=1
data.sets = sapply(1:n, FUN=function(i){rnorm(15,3,1)})
all.p.values = c()
#Assess all possible combinations of of pairwise comparisons
for(i in 1:(n-1)) {
for(j in (i+1):n) {
#current pairwise comparison
p.value = t.test(data.sets[,i], data.sets[,j])$p.value
#append to vector of p.values
all.p.values = c(all.p.values, p.value)
}
}
#return boolean if any are lower than .05
return(any(all.p.values < .05))
}
###------Our sim functoin-------###
#run simulation 1000 times at current n
sims = sapply(1:1000, FUN=sim)
error.rate = mean(sims)
entry = c(n, combo(n), error.rate)
summary.matrix[n-1, ] = entry
}
summary.matrix
colnames(matrix) = c(n.data.sets, n.pwise.comparisons, error.rate)
colnames(matrix) = c("n.data.sets", "n.pwise.comparisons", "error.rate")
colnames(summary.matrix) = c("n.data.sets", "n.pwise.comparisons", "erro
colnames(summary.matrix) = c("n.data.sets", "n.pwise.comparisons",
"error.rate")
summary.matrix
colnames(summary.matrix) = c("n.data.sets", "n.pwise.comparisons",
"error.rate")
summary.matrix
plot(Ns, summary.matrix["error.rate"])
summary.matrix
Ns
Ns = seq(2:10)
Ns
Ns = seq(from=2, to=10)
Ns
plot(Ns, summary.matrix["error.rate"])
summary.matrix["error.rate"]
Ns = seq(from=2, to=10)
#Our combinations functino for the number of combinations (order doesn't matter)
combo <- function(n, r=2) {
return(factorial(n)/(factorial(n-r)*factorial(r)))
}
summary.matrix = matrix(nrow=9, ncol=3)
#Loop through number of data sets
for(n in Ns) {
###------Our sim functoin-------###
sim = function(k) {
#Our current n data sets with 15 sample, mean=3, sigma=1
data.sets = sapply(1:n, FUN=function(i){rnorm(15,3,1)})
all.p.values = c()
#Assess all possible combinations of of pairwise comparisons
for(i in 1:(n-1)) {
for(j in (i+1):n) {
#current pairwise comparison
p.value = t.test(data.sets[,i], data.sets[,j])$p.value
#append to vector of p.values
all.p.values = c(all.p.values, p.value)
}
}
#return boolean if any are lower than .05
return(any(all.p.values < .05))
}
###------Our sim functoin-------###
#run simulation 1000 times at current n
sims = sapply(1:1000, FUN=sim)
error.rate = mean(sims)
entry = c(n, combo(n), error.rate)
summary.matrix[n-1, ] = entry
}
#rename our columns
colnames(summary.matrix) = c("n.data.sets", "n.pwise.comparisons",
"error.rate")
#plot our error rates
plot(Ns, summary.matrix["error.rate"])
summary.matrix
Ns
summary.matrix["error.rate"]
summary.matrix["error.rate"]
summary.matrix[,"error.rate"]
plot(Ns, summary.matrix[,"error.rate"]
)
barplot(Ns, summary.matrix[,"error.rate"], )
barplot(summary.matrix[,"error.rate"], )
barplot(summary.matrix[,"error.rate"], x=Ns)
barplot(summary.matrix[,"error.rate"], xlab=Ns)
?plot
plot(Ns, summary.matrix[,"error.rate"], type=h)
?plot
plot(Ns, summary.matrix[,"error.rate"], type="h")
?plot
?barplot
barplot(summary.matrix[,"error.rate"], names.arg=Ns)
barplot(summary.matrix[,"error.rate"], names.arg=Ns, main="Error rates by number of pairwise comparisons" xlab="n.data sets", ylab="error.rate")
barplot(summary.matrix[,"error.rate"], names.arg=Ns, main="Error rates by number of pairwise comparisons" xlab="n.data sets", ylab="error.rate")
barplot(summary.matrix[,"error.rate"], names.arg=Ns, main="Error rates by number of pairwise comparisons" xlab="n.data sets", ylab="error.rate")
barplot(summary.matrix[,"error.rate"])
barplot(summary.matrix[,"error.rate"], names.arg=Ns)
barplot(summary.matrix[,"error.rate"], names.arg=Ns,
main="Error rates by number of pairwise comparisons",
xlab="n.data sets", ylab="error.rate")
barplot(summary.matrix[,"error.rate"], names.arg=Ns,
main="Error rates by number of pairwise comparisons",
xlab="n.data sets", ylab="error.rate", col="blue")
library(english)
library(languageR)
library(languageR)
head(english)
with(english, plot(ncount, RTlexdec))
with(english, plot(Ncount, RTlexdec))
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue")
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue"))
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue"))
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue"), pch=16)
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue"), pch=20)
m = lm(RTlexdec ~ Ncount, data=Enlish)
m = lm(RTlexdec ~ Ncount, data=English)
library(languageR)
m = lm(RTlexdec ~ Ncount, data=English)
m = lm(RTlexdec ~ Ncount, data=english)
m
with(english, plot(RTlexdec, Ncount,
main="RT against neighborhood density",
col="blue"), pch=20)
library(languageR)
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue"), pch=20)
summar(m)
summary(m)
m$intercept
m$Intercept
m[1]
m$coefficients[1]
with(english, plot(Ncount, exp(RTlexdec),
main="RT against neighborhood density",
col="blue"), pch=20)
m = lm(exp(RTlexdec) ~ Ncount, data=english)
summary(m)
m$coefficients[1]
m$coefficients[2]
m$coefficients[1]
m$p.value
m$p.values
summary(m)
m$pvalues
m$pr
m[1]
m[2]
m[3]
m[4]
m[5]
m[5]
m[7]
head(m[7])
m[8]
m[9]
m[10]
m[11]
m
m = lm(exp(RTlexdec) ~ Ncount, data=english)
summary(m)
summary(m)$p.value
summary(m)$pr
summary(m)
plot(Ncount, resid(m), main="Model residiuals",
xlab="RT", ylab="Neighborhood density")
plot(english$Ncount, resid(m), main="Model residiuals",
xlab="RT", ylab="Neighborhood density")
plot(english$Ncount, resid(m), main="Model residiuals",
xlab="RT", ylab="Neighborhood density",
col="purple")
m = lm(exp(RTlexdec) ~ Ncount, data=english)
summary(m)
m$coefficients[1]
plot(english$Ncount, resid(m), main="Model residiuals",
xlab="RT", ylab="Neighborhood density",
col="purple")
with(english, plot(Ncount, exp(RTlexdec),
main="RT against neighborhood density",
col="blue"), pch=20)
m = lm(exp(RTlexdec) ~ Ncount, data=english)
m
abline(m)
abline(m, col="red")
abline(m, col="red", pch=24)
abline(m, col="red")
plot(english$Ncount, resid(m), main="Model residiuals",
xlab="RT", ylab="Neighborhood density",
col="purple")
summary(m)
anova(m)
anova(m)["Df"]
anova(m)["Sum Sq"]
anova(m)
anova(m)["Sum sq"][1] / anova(m)["Sum sq"][2]
anova(m)["Sum Sq"][1] / anova(m)["Sum Sq"][2]
anova(m)
anova(m)["Sum Sq"]
anova(m)["Sum Sq"][1]
anova(m)["Sum Sq"][1,]
anova(m)["Sum Sq"][1,] / anova(m)["Sum Sq"][2,]
summary(m)
summary(m)
anova(m)["Sum Sq"][1,] / anova(m)["Sum Sq"][2,]
anova(m)
summary(m)
summary(m)["Residual standard error"]
plot(english$Ncount, resid(m), main="Model residiuals",
xlab="Neighborhood density", ylab="RT",
col="purple")
with(english, plot(Ncount, exp(RTlexdec),
main="RT against neighborhood density",
col="blue"), pch=20)
m = lm(exp(RTlexdec) ~ Ncount, data=english)
abline(m, col="red")
abline(v=mean(english$Ncount),
h=mean(exp(english$RTlexdec)) col="green")
abline(v=mean(english$Ncount), col="green")
?abline
abline(h=mean(exp(english$RTlexdec), col="green")
abline(v=mean(english$Ncount), col="green")
abline(h=mean(exp(english$RTlexdec), col="green")
abline(v=mean(english$Ncount), col="green")
abline(h=mean(exp(english$RTlexdec), col="green"))
m = lm(exp(RTlexdec) ~ Ncount, data=english)
with(english, plot(Ncount, exp(RTlexdec),
main="RT against neighborhood density",
col="blue"), pch=20)
m = lm(exp(RTlexdec) ~ Ncount, data=english)
abline(m, col="red")
abline(v=mean(english$Ncount), col="green")
abline(h=mean(exp(english$RTlexdec), col="green"))
abline(h=mean(exp(english$RTlexdec)), col="green")
with(english, plot(Ncount, exp(RTlexdec),
main="RT against neighborhood density",
col="blue"), pch=20)
m = lm(exp(RTlexdec) ~ Ncount, data=english)
abline(m, col="red")
abline(v=mean(english$Ncount), col="green", lty=2)
abline(h=mean(exp(english$RTlexdec)), col="green", lty=2)
coe(m)
coef(m)
coef(m)[1]
with(english, plot(Ncount, exp(RTlexdec),
main="RT against neighborhood density",
col="blue"), pch=20)
abline(a=coef(m)[1], b=coef(m)[2], col="red")
abline(v=mean(english$Ncount), col="green", lty=2)
abline(h=mean(exp(english$RTlexdec)), col="green", lty=2)
with(english, plot(Ncount, exp(RTlexdec),
main="RT against neighborhood density",
col="blue"), pch=20)
abline(a=coef(m)[1], b=coef(m)[2], col="red")
abline(v=mean(english$Ncount), col="green", lty=2)
abline(h=mean(exp(english$RTlexdec)), col="green", lty=2)
plot(resid(m), main="Model residiuals",
xlab="Neighborhood density", ylab="RT",
col="purple")
plot(resid(m), main="Model residiuals")
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue"), pch=20)
m = lm(RTlexdec ~ Ncount, data=english)
summary(m)
m$coefficients[1]
abline(m, col="red")
coef(m)
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue"), pch=20)
abline(a=coef(m)[1], b=coef(m)[2], col="red")
plot(resid(m), main="Model residiuals")
resid(m)[1500]
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue"), pch=20)
m = lm(RTlexdec ~ Ncount, data=english)
summary(m)
m$coefficients[1]
abline(m, col="red")
coef(m)
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue"), pch=20)
abline(a=coef(m)[1], b=coef(m)[2], col="red")
abline(v=mean(english$Ncount), col="green", lty=2)
abline(h=mean(english$RTlexdec), col="green", lty=2)
plot(resid(m), main="Model residiuals")
par=mfrow(c(1,2))
par(mfrow=c(1,2))
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue"), pch=20)
abline(a=coef(m)[1], b=coef(m)[2], col="red")
plot(resid(m), main="Model residiuals")
plot(resid(m), main="Model residiuals")
plot(english$RTlexdec, main="RTlexdec")
m
plot(sort(english$RTlexdec), main="RTlexdec")
plot(Ncount, sort(english$RTlexdec), main="RTlexdec")
plot(NCount, sort(english$RTlexdec), main="RTlexdec")
plot(english$Ncount, sort(english$RTlexdec), main="RTlexdec")
plot(sort(english$RTlexdec), english$Ncount, main="RTlexdec")
plot(english$RTlexdec)
plot(sort(english$RTlexdec)
plot(sort(english$RTlexdec))
mean(english$RTlexdec)
length(english$RTlexdec)
english$RTlexdec[length(english$RTlexdec)/2]
plot(resid(m), main="Model residiuals")
4568/2
?english
m = lm(RTlexdec ~ Ncount, data=english)
summary(m)
abline(m, col="red")
coef(m)
with(english, plot(Ncount, RTlexdec,
main="RT against neighborhood density",
col="blue"), pch=20)
abline(a=coef(m)[1], b=coef(m)[2], col="red")
plot(resid(m), main="Model residiuals")
english[1500,]
english[1400:1600,]
english[1450:1550,]
english[2500:3500, AgeSubject]
?english
english[2500:3500, "AgeSubject"]
english[, "AgeSubject"]
par(mfrow=c(1,1))
plot(english$RTlexdec, main="RTlexdec by Index")
plot(english$AgeSubeject)
plot(english$AgeSubject)
factor(english$AgeSubject)
plot(factor(english$AgeSubject))
plot(as.numeric(factor(english$AgeSubject))
)
barplot(as.numeric(factor(english$AgeSubject)))
barplot(as.numeric(factor(english$AgeSubject))-1)
barplot(as.numeric(factor(english$AgeSubject)))
barplot(as.numeric(factor(english$AgeSubject)), main="Age factors"
)
plot(resid(m), main="Model residiuals")
par(mfrow=c(1,2))
factor(english$AgeSubject)
barplot(as.numeric(factor(english$AgeSubject)), main="Age factors")
plot(resid(m), main="Model residiuals")
mean(which(english$AgeSubjects == "Young"))
mean(english$RTlexdec[which(english$AgeSubjects == "Young")])
mean(english$RTlexdec, which(english$AgeSubjects == "Young")])
which(english$AgeSubjects == "Young")
which(english$AgeSubjects == "young")
mean(which(english$RTlexdec[,"AgeSubject"] == "Young"))
mean(which(english[,"AgeSubject"] == "Young"))
mean(which(english[,"AgeSubject"] == "young"))
mean(which(english$RTlexdec[,"AgeSubject"] == "young"))
which(english[,"AgeSubject"] == "young"))
test = which(english[,"AgeSubject"] == "young"))
test = which(english[,"AgeSubject"] == "young")
test
plot(test)
old.indices = which(english[,"AgeSubject"] == "old")
plot(old, add=T)
plot(old.indices, add=T)
young.indices = which(english[,"AgeSubject"] == "young")
young.indices = which(english[,"AgeSubject"] == "young")
plot(young.indices)
plot(old.indices, add=T)
english[young.indices,]
english[young.indices[1:10]
english[young.indices[1:10],]
english[young.indices, "AgeSubject"]
m.Ncount.Age = lm(RTlexdec ~ Ncount + SubjectAge, data=english)
m.Ncount.Age = lm(RTlexdec ~ Ncount + AgeSubject, data=english)
summary(m.Ncount.Age)
anova(m.Ncount.Age)
